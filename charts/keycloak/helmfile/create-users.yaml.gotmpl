manifests:
  - metadata:
      name: keycloak-create-users-and-clients
    apiVersion: batch/v1
    kind: Job
    spec:
      template:
        spec:
          securityContext:
            runAsUser: 1001
          volumes:
          - name: scripts
            secret:
              secretName: keycloak-scripts
          - name: clients
            secret:
              secretName: keycloak-clients
          initContainers:
          - name: wait-for-server
            image: docker.io/jboss/keycloak:11.0.0
            volumeMounts:
            - name: scripts
              mountPath: "/scripts"
              readOnly: true
            - name: clients
              mountPath: "/clients"
              readOnly: true
            command:
            - "bin/bash"
            - "/scripts/wait-for-server.sh"
          - name: create-users
            image: docker.io/jboss/keycloak:11.0.0
            volumeMounts:
            - name: scripts
              mountPath: "/scripts"
              readOnly: true
            - name: clients
              mountPath: "/clients"
              readOnly: true
            envFrom:
              - secretRef:
                  name: keycloak-admin-secret
            command:
            - "bin/bash"
            - "/scripts/create-users.sh"
          - name: create-clients
            image: docker.io/jboss/keycloak:11.0.0
            volumeMounts:
            - name: scripts
              mountPath: "/scripts"
              readOnly: true
            - name: clients
              mountPath: "/clients"
              readOnly: true
            envFrom:
              - secretRef:
                  name: keycloak-admin-secret
            command:
            - "bin/bash"
            - "/scripts/create-clients.sh"
          containers:
          - name: done
            image: alpine:3.12
            command:
            - "sleep"
            - "1"
          restartPolicy: Never
      backoffLimit: 4

  - metadata:
      name: keycloak-scripts
    apiVersion: v1
    kind: Secret
    stringData:
      wait-for-server.sh: |
        while ! curl -s http://keycloak-http:80/auth > /dev/null; do
          echo waiting for keycloak server to come online.
          sleep 10
        done

      create-users.sh: |
        #!/bin/bash

        KCADM=/opt/jboss/keycloak/bin/kcadm.sh

        $KCADM config credentials --server http://keycloak-http:80/auth \
          --realm master --user $KEYCLOAK_USER  --password $KEYCLOAK_PASSWORD \
          --config /tmp/kcadm.config

        {{- range .Values._.keycloak.users }}
        echo "Creating user {{ .user }}"
        $KCADM create users -r master \
          -s username="{{ .user }}" \
          -s email="{{ .email }}" \
          -s enabled=true \
          -o --fields id \
          --config /tmp/kcadm.config

        echo "Setting password for {{ .user }}"
        $KCADM set-password -r master --username="{{ .user }}" \
          --new-password="{{ .pass }}" --config /tmp/kcadm.config
        {{- end }}

        exit 0

      create-clients.sh: |
        #!/bin/bash

        KCADM=/opt/jboss/keycloak/bin/kcadm.sh

        $KCADM config credentials --server http://keycloak-http:80/auth \
          --realm master --user $KEYCLOAK_USER  --password $KEYCLOAK_PASSWORD \
          --config /tmp/kcadm.config

        for client in /clients/*.json; do
          echo "creating client from ${client}"
          $KCADM create clients -r master -f ${client} -i \
          --config /tmp/kcadm.config
        done

        exit 0

  - metadata:
      name: keycloak-clients
    apiVersion: v1
    kind: Secret
    stringData:
{{- range .Values._.keycloak.clients }}
      {{ .name }}.json: |
        {
            "clientId": "{{ .name }}",
            "rootUrl": "{{ .url }}",
            "adminUrl": "{{ .url }}",
            "baseUrl": "{{ .url }}",
            "surrogateAuthRequired": false,
            "enabled": true,
            "alwaysDisplayInConsole": false,
            "clientAuthenticatorType": "client-secret",
            "secret" : "{{ .secret }}",
            "redirectUris": [
                "{{ .url }}/*"
            ],
            "webOrigins": [
                "{{ .url }}"
            ],
            "notBefore": 0,
            "bearerOnly": false,
            "consentRequired": false,
            "standardFlowEnabled": true,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": true,
            "serviceAccountsEnabled": false,
            "publicClient": false,
            "frontchannelLogout": false,
            "protocol": "openid-connect",
            "attributes": {
                "saml.assertion.signature": "false",
                "saml.force.post.binding": "false",
                "saml.multivalued.roles": "false",
                "saml.encrypt": "false",
                "saml.server.signature": "false",
                "saml.server.signature.keyinfo.ext": "false",
                "exclude.session.state.from.auth.response": "false",
                "saml_force_name_id_format": "false",
                "saml.client.signature": "false",
                "tls.client.certificate.bound.access.tokens": "false",
                "saml.authnstatement": "false",
                "display.on.consent.screen": "false",
                "saml.onetimeuse.condition": "false"
            },
            "authenticationFlowBindingOverrides": {},
            "fullScopeAllowed": true,
            "nodeReRegistrationTimeout": -1,
            "defaultClientScopes": [
                "role_list",
                "profile",
                "email"
            ],
            "optionalClientScopes": [
                "address",
                "phone",
                "offline_access",
                "microprofile-jwt"
            ],
            "access": {
                "view": true,
                "configure": true,
                "manage": true
            }
        }
{{- end }}